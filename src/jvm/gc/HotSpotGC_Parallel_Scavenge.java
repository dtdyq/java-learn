package jvm.gc;
/**
 * 
 * @author dtdyq
 * 
 * Parallel Scavenge收集器是一个新生代收集器，使用复制算法的多线程收集器
 * 该收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能缩短垃圾
 * 收集时用户的等待时间，而该收集器的目标是达到一个可控制的吞吐量，吞吐量是cpu用于
 * 运行用户代码的时间和总消耗时间的比值，
 * 停顿时间越短越适合需要与用户交互的程序，而吞吐量高则可以更高效地利用CPU时间，适合
 * 运行后台程序
 * 
 * 该收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:
 * MaxGCPauseMillis参数和直接设置吞吐量大小的-XX:GCTimeRadio参数
 * 第一个参数设置毫秒数，不过设置的时间越小，则gc收集频率越高，因为jvm会减小新生代
 * 内存区域大小来减小垃圾收集停顿时间的，是一种用空间换时间的做法
 * 第二个参数设置垃圾收集时间与总时间的比率，如参数为19，则gc占用时间为1/(1+19)
 * 默认为99
 * 
 * 该收集器也被称为“吞吐量优先”收集器，它还有一个参数-XX:+UseAdaptiveSizePolicy
 * 这是一个开关参数，当这个参数打开时，就不需要手工指定新声代的大小(-Xmn)、Eden和
 * survivor区的比例(-XXServivorRadio)、晋升老年代对象年龄(-XX:PretenureSizeThreshold)
 * 等参数了，虚拟机会根据系统当前的运行情况收集性能监控信息，动态调整参数以提供最合适
 * 的停顿时间和最大的吞吐量，这称为自适应调节策略，是该收集器和ParNew收集器的一个
 * 重要区别
 * **************************************************************************
 * 如果对收集器运作原理不了解，则只需要指定-Xmx，使用MaxGCPauseMillis和GCTimeRadio
 * 来设置优化目标，而将其他细节参数交给虚拟机完成
 *
 */
public class HotSpotGC_Parallel_Scavenge {

}
